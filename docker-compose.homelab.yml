# 🎩 GENTLEMAN - Complete Homelab Setup
# ═══════════════════════════════════════════════════════════════
# Vollständiges Self-Hosting Setup mit allen Services

networks:
  gentleman-mesh:
    external: true
  homelab:
    external: true
    name: gentleman-homelab
  homeassistant:
    external: true
    name: gentleman-homeassistant

volumes:
  # Git Server
  gitea-data:
  gitea-config:
  gitea-db-data:
  gitea-backups:
  
  # Home Assistant
  homeassistant-config:
  homeassistant-media:
  
  # ProtonMail
  protonmail-data:
  protonmail-config:
  
  # TrueNAS/FreeNAS Integration
  truenas-data:
  truenas-config:
  
  # Nextcloud
  nextcloud-data:
  nextcloud-config:
  nextcloud-db-data:
  
  # Monitoring
  prometheus-data:
  grafana-data:
  loki-data:
  
  # Security
  vaultwarden-data:
  pihole-data:
  pihole-dnsmasq:
  
  # Media
  jellyfin-config:
  jellyfin-cache:
  
  # Proxy
  traefik-data:
  
  # Health Monitoring
  healthchecks-data:

services:
  # ═══════════════════════════════════════════════════════════════
  # 📚 Git Server (Gitea)
  # ═══════════════════════════════════════════════════════════════
  
  gitea-db:
    image: postgres:15-alpine
    container_name: gentleman-gitea-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: gitea
      POSTGRES_USER: gitea
      POSTGRES_PASSWORD: ${GITEA_DB_PASSWORD}
    volumes:
      - gitea-db-data:/var/lib/postgresql/data
    networks:
      - homelab
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gitea -d gitea"]
      interval: 30s
      timeout: 10s
      retries: 3

  gitea:
    image: gitea/gitea:latest
    container_name: gentleman-gitea
    restart: unless-stopped
    depends_on:
      gitea-db:
        condition: service_healthy
    environment:
      - USER_UID=1000
      - USER_GID=1000
      - GITEA__database__DB_TYPE=postgres
      - GITEA__database__HOST=gitea-db:5432
      - GITEA__database__NAME=gitea
      - GITEA__database__USER=gitea
      - GITEA__database__PASSWD=${GITEA_DB_PASSWORD}
      - GITEA__server__DOMAIN=git.gentleman.local
      - GITEA__server__SSH_DOMAIN=git.gentleman.local
      - GITEA__server__ROOT_URL=http://git.gentleman.local:3000/
      - GITEA__security__INSTALL_LOCK=true
      - GITEA__admin__USERNAME=${GITEA_ADMIN_USER}
      - GITEA__admin__EMAIL=${GITEA_ADMIN_EMAIL}
    volumes:
      - gitea-data:/data
      - gitea-config:/etc/gitea
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "3000:3000"
      - "2222:22"
    networks:
      - homelab
      - gentleman-mesh

  # ═══════════════════════════════════════════════════════════════
  # ☁️ Nextcloud
  # ═══════════════════════════════════════════════════════════════
  
  nextcloud-db:
    image: postgres:15-alpine
    container_name: gentleman-nextcloud-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: nextcloud
      POSTGRES_USER: nextcloud
      POSTGRES_PASSWORD: ${NEXTCLOUD_DB_PASSWORD}
    volumes:
      - nextcloud-db-data:/var/lib/postgresql/data
    networks:
      - homelab
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nextcloud -d nextcloud"]
      interval: 30s
      timeout: 10s
      retries: 3

  nextcloud:
    image: nextcloud:latest
    container_name: gentleman-nextcloud
    restart: unless-stopped
    depends_on:
      nextcloud-db:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=nextcloud-db
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD=${NEXTCLOUD_DB_PASSWORD}
      - NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN_USER}
      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD}
      - NEXTCLOUD_TRUSTED_DOMAINS=cloud.gentleman.local localhost 192.168.68.111
    volumes:
      - nextcloud-data:/var/www/html
      - nextcloud-config:/var/www/html/config
      - ./config/homelab/nextcloud.config.php:/var/www/html/config/custom.config.php:ro
      - ./media:/media:ro
    ports:
      - "8080:80"
    networks:
      - homelab
      - gentleman-mesh

  # ═══════════════════════════════════════════════════════════════
  # 🏠 Home Assistant
  # ═══════════════════════════════════════════════════════════════
  
  homeassistant:
    image: ghcr.io/home-assistant/home-assistant:stable
    container_name: gentleman-homeassistant
    restart: unless-stopped
    privileged: true
    environment:
      - TZ=Europe/Berlin
    volumes:
      - homeassistant-config:/config
      - homeassistant-media:/media
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    ports:
      - "8123:8123"
    networks:
      - homeassistant
      - homelab
      - gentleman-mesh
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8123"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ═══════════════════════════════════════════════════════════════
  # 📧 ProtonMail Bridge (ARM64 Compatible)
  # ═══════════════════════════════════════════════════════════════
  
  protonmail-bridge:
    image: alpine:latest
    container_name: gentleman-protonmail-bridge
    restart: unless-stopped
    command: >
      sh -c "
      echo 'ProtonMail Bridge placeholder for ARM64 systems' &&
      echo 'Please configure ProtonMail manually or use ProtonMail web interface' &&
      while true; do sleep 3600; done
      "
    environment:
      - PROTONMAIL_USERNAME=${PROTONMAIL_USERNAME}
      - PROTONMAIL_PASSWORD=${PROTONMAIL_PASSWORD}
      - PROTONMAIL_2FA_CODE=${PROTONMAIL_2FA_CODE}
    volumes:
      - protonmail-data:/data
      - protonmail-config:/config
    ports:
      - "1025:1025"  # SMTP placeholder
      - "1143:1143"  # IMAP placeholder
    networks:
      - homelab
      - gentleman-mesh

  # ═══════════════════════════════════════════════════════════════
  # 🔐 Vaultwarden (Bitwarden)
  # ═══════════════════════════════════════════════════════════════
  
  vaultwarden:
    image: vaultwarden/server:latest
    container_name: gentleman-vaultwarden
    restart: unless-stopped
    environment:
      - WEBSOCKET_ENABLED=true
      - ADMIN_TOKEN=${VAULTWARDEN_ADMIN_TOKEN}
      - DOMAIN=http://vault.gentleman.local:8082
    volumes:
      - vaultwarden-data:/data
    ports:
      - "8082:80"
      - "3012:3012"
    networks:
      - homelab
      - gentleman-mesh

  # ═══════════════════════════════════════════════════════════════
  # 🛡️ Pi-hole (DNS Ad-Blocker)
  # ═══════════════════════════════════════════════════════════════
  
  pihole:
    image: pihole/pihole:latest
    container_name: gentleman-pihole
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
      - WEBPASSWORD=${PIHOLE_PASSWORD}
      - PIHOLE_DNS_=1.1.1.1;8.8.8.8
      - DNSMASQ_LISTENING=all
    volumes:
      - pihole-data:/etc/pihole
      - pihole-dnsmasq:/etc/dnsmasq.d
    ports:
      - "8081:80"
      - "53:53/tcp"
      - "53:53/udp"
    networks:
      - homelab
      - gentleman-mesh
    cap_add:
      - NET_ADMIN

  # ═══════════════════════════════════════════════════════════════
  # 🎬 Jellyfin (Media Server)
  # ═══════════════════════════════════════════════════════════════
  
  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: gentleman-jellyfin
    restart: unless-stopped
    environment:
      - JELLYFIN_PublishedServerUrl=http://media.gentleman.local:8096
    volumes:
      - jellyfin-config:/config
      - jellyfin-cache:/cache
      - ./media:/media:ro
    ports:
      - "8096:8096"
      - "8920:8920"
      - "7359:7359/udp"
      - "1900:1900/udp"
    networks:
      - homelab
      - gentleman-mesh

  # ═══════════════════════════════════════════════════════════════
  # 🌐 Traefik (Reverse Proxy)
  # ═══════════════════════════════════════════════════════════════
  
  traefik:
    image: traefik:latest
    container_name: gentleman-traefik
    restart: unless-stopped
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-data:/data
      - ./config/security/acme.json:/acme.json
    ports:
      - "8083:8080"
      - "80:80"
      - "443:443"
    networks:
      - homelab
      - gentleman-mesh

  # ═══════════════════════════════════════════════════════════════
  # 📊 Monitoring Stack
  # ═══════════════════════════════════════════════════════════════
  
  prometheus:
    image: prom/prometheus:latest
    container_name: gentleman-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/homelab/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - homelab
      - gentleman-mesh

  grafana:
    image: grafana/grafana:latest
    container_name: gentleman-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/homelab/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/homelab/dashboards:/etc/grafana/provisioning/dashboards:ro
    ports:
      - "3001:3000"
    networks:
      - homelab
      - gentleman-mesh

  loki:
    image: grafana/loki:latest
    container_name: gentleman-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/homelab/loki.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    ports:
      - "3100:3100"
    networks:
      - homelab

  # ═══════════════════════════════════════════════════════════════
  # 🏥 Health Monitoring
  # ═══════════════════════════════════════════════════════════════
  
  healthchecks:
    image: healthchecks/healthchecks:latest
    container_name: gentleman-healthchecks
    restart: unless-stopped
    environment:
      - SECRET_KEY=${HEALTHCHECKS_SECRET_KEY}
      - SITE_ROOT=http://health.gentleman.local:8084
      - SITE_NAME=GENTLEMAN Health Monitor
      - DEFAULT_FROM_EMAIL=health@gentleman.local
      - EMAIL_HOST=protonmail-bridge
      - EMAIL_PORT=1025
      - EMAIL_USE_TLS=true
    volumes:
      - healthchecks-data:/opt/healthchecks/data
    ports:
      - "8084:8000"
    networks:
      - homelab
      - gentleman-mesh

  # ═══════════════════════════════════════════════════════════════
  # 🔄 Watchtower (Auto Updates)
  # ═══════════════════════════════════════════════════════════════
  
  watchtower:
    image: containrrr/watchtower:latest
    container_name: gentleman-watchtower
    restart: unless-stopped
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=86400
      - WATCHTOWER_NOTIFICATIONS=email
      - WATCHTOWER_NOTIFICATION_EMAIL_FROM=${WATCHTOWER_EMAIL_FROM}
      - WATCHTOWER_NOTIFICATION_EMAIL_TO=${WATCHTOWER_EMAIL_TO}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=protonmail-bridge
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=1025
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - homelab

  # ═══════════════════════════════════════════════════════════════
  # 🌐 MQTT Broker
  # ═══════════════════════════════════════════════════════════════
  
  mosquitto:
    image: eclipse-mosquitto:latest
    container_name: gentleman-mosquitto
    restart: unless-stopped
    volumes:
      - ./config/homelab/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
    ports:
      - "1883:1883"
      - "9001:9001"
    networks:
      - homelab
      - homeassistant
      - gentleman-mesh

  # ═══════════════════════════════════════════════════════════════
  # 📊 TrueNAS Integration
  # ═══════════════════════════════════════════════════════════════
  
  truenas-sync:
    image: alpine:latest
    container_name: gentleman-truenas-sync
    restart: unless-stopped
    command: |
      sh -c "
        apk add --no-cache curl jq rsync openssh-client &&
        while true; do
          echo 'TrueNAS sync running...'
          # Add your TrueNAS sync logic here
          sleep 300
        done
      "
    volumes:
      - ./config/homelab/truenas.yml:/config/truenas.yml:ro
      - truenas-data:/data
      - ./media:/media
      - ./backups:/backups
    networks:
      - homelab
      - gentleman-mesh
    environment:
      - TRUENAS_HOST=${TRUENAS_HOST}
      - TRUENAS_API_KEY=${TRUENAS_API_KEY}
      - TRUENAS_USERNAME=${TRUENAS_USERNAME}

  # ═══════════════════════════════════════════════════════════════
  # 🌉 Homelab Bridge (Service Integration)
  # ═══════════════════════════════════════════════════════════════
  
  homelab-bridge:
    image: python:3.11-alpine
    container_name: gentleman-homelab-bridge
    restart: unless-stopped
    working_dir: /app
    command: >
      sh -c "
      pip install flask requests paho-mqtt &&
      python bridge.py
      "
    volumes:
      - ./config/homelab/bridge.py:/app/bridge.py:ro
    ports:
      - "8090:8090"
    networks:
      - homelab
      - gentleman-mesh
    environment:
      - HOMEASSISTANT_TOKEN=${HOMEASSISTANT_TOKEN}
      - GITEA_API_TOKEN=${GITEA_API_TOKEN} 