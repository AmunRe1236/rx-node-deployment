#!/bin/bash

# GENTLEMAN Tailscale Friend Network Setup
# Dezentrale Netzwerke mit Inter-Friend Kommunikation

set -eo pipefail

# Farben
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

log_success() {
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] ${GREEN}‚úÖ $1${NC}"
}

log_error() {
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] ${RED}‚ùå $1${NC}" >&2
}

log_info() {
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] ${BLUE}‚ÑπÔ∏è $1${NC}"
}

log_warning() {
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] ${YELLOW}‚ö†Ô∏è $1${NC}"
}

# Zeige dezentrale Architektur
show_decentralized_architecture() {
    echo -e "${PURPLE}üåê GENTLEMAN Dezentrale Tailscale Architektur${NC}"
    echo "=============================================="
    echo ""
    echo -e "${CYAN}Jeder Freund hat sein eigenes Tailscale-Netzwerk:${NC}"
    echo ""
    echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
    echo "‚îÇ   Amon's Net    ‚îÇ  ‚îÇ   Max's Net     ‚îÇ  ‚îÇ   Lisa's Net    ‚îÇ"
    echo "‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ  ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ  ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ"
    echo "‚îÇ ‚îÇ M1  ‚îÇ ‚îÇ RX  ‚îÇ ‚îÇ  ‚îÇ ‚îÇLptop‚îÇ ‚îÇ Pi  ‚îÇ ‚îÇ  ‚îÇ ‚îÇ PC  ‚îÇ ‚îÇPhone‚îÇ ‚îÇ"
    echo "‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ  ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ  ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ"
    echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
    echo "        ‚îÇ                     ‚îÇ                     ‚îÇ"
    echo "        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
    echo "                              ‚îÇ"
    echo "                    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
    echo "                    ‚îÇ Shared Services ‚îÇ"
    echo "                    ‚îÇ (Optional)      ‚îÇ"
    echo "                    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
    echo ""
}

# Friend-to-Friend Kommunikation
create_friend_communication() {
    log_info "üìù Erstelle Friend-to-Friend Kommunikations-Setup..."
    
    cat > ./friend_network_connector.sh << 'EOF'
#!/bin/bash

# GENTLEMAN Friend Network Connector
# Verbindet verschiedene Tailscale-Netzwerke von Freunden

# Konfiguration
FRIEND_NETWORKS=(
    "amon:100.96.219.28:8765"      # Amon's M1 Mac
    "max:100.64.0.15:8765"         # Max's Laptop (Beispiel IP)
    "lisa:100.64.0.32:8765"        # Lisa's PC (Beispiel IP)
    "tom:100.64.0.48:8765"         # Tom's Mac (Beispiel IP)
)

# Farben
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}‚ÑπÔ∏è $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

# Pr√ºfe alle Friend Networks
check_friend_networks() {
    echo "üåê GENTLEMAN Friend Networks Status"
    echo "===================================="
    echo ""
    
    for network in "${FRIEND_NETWORKS[@]}"; do
        IFS=':' read -r friend_name friend_ip friend_port <<< "$network"
        
        echo -n "üë§ $friend_name ($friend_ip): "
        
        if curl -s --max-time 3 "http://$friend_ip:$friend_port/health" >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Online${NC}"
        else
            echo -e "${RED}‚ùå Offline${NC}"
        fi
    done
    echo ""
}

# Verbinde zu Friend Network
connect_to_friend() {
    local friend_name="$1"
    
    if [ -z "$friend_name" ]; then
        echo "Verwendung: $0 connect <friend-name>"
        echo ""
        echo "Verf√ºgbare Freunde:"
        for network in "${FRIEND_NETWORKS[@]}"; do
            IFS=':' read -r name ip port <<< "$network"
            echo "  ‚Ä¢ $name"
        done
        return 1
    fi
    
    # Finde Friend Network
    for network in "${FRIEND_NETWORKS[@]}"; do
        IFS=':' read -r name ip port <<< "$network"
        if [ "$name" = "$friend_name" ]; then
            log_info "üîó Verbinde zu $friend_name's GENTLEMAN System..."
            
            # Teste Verbindung
            if curl -s --max-time 5 "http://$ip:$port/health" >/dev/null 2>&1; then
                log_success "Verbunden mit $friend_name ($ip:$port)"
                
                # Zeige verf√ºgbare Services
                echo ""
                echo "üéØ Verf√ºgbare Services bei $friend_name:"
                echo "‚Ä¢ Status: curl http://$ip:$port/status"
                echo "‚Ä¢ Nodes: curl http://$ip:$port/nodes"
                echo "‚Ä¢ SSH: ssh $ip (falls konfiguriert)"
                
                return 0
            else
                log_error "$friend_name ist nicht erreichbar"
                return 1
            fi
        fi
    done
    
    log_error "Freund '$friend_name' nicht gefunden"
}

# Broadcast an alle Friends
broadcast_to_friends() {
    local message="$1"
    
    if [ -z "$message" ]; then
        echo "Verwendung: $0 broadcast '<message>'"
        return 1
    fi
    
    log_info "üì° Sende Broadcast an alle Friend Networks..."
    
    for network in "${FRIEND_NETWORKS[@]}"; do
        IFS=':' read -r friend_name friend_ip friend_port <<< "$network"
        
        echo -n "üì§ $friend_name: "
        
        # Sende Message (hier k√∂nntest du einen Custom Endpoint verwenden)
        if curl -s --max-time 3 "http://$friend_ip:$friend_port/health" >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Delivered${NC}"
        else
            echo -e "${RED}‚ùå Failed${NC}"
        fi
    done
}

# Hauptfunktion
main() {
    case "${1:-status}" in
        "status")
            check_friend_networks
            ;;
        "connect")
            connect_to_friend "$2"
            ;;
        "broadcast")
            broadcast_to_friends "$2"
            ;;
        "list")
            echo "üë• GENTLEMAN Friend Networks:"
            for network in "${FRIEND_NETWORKS[@]}"; do
                IFS=':' read -r name ip port <<< "$network"
                echo "  ‚Ä¢ $name: $ip:$port"
            done
            ;;
        *)
            echo "üéØ GENTLEMAN Friend Network Connector"
            echo "====================================="
            echo ""
            echo "Kommandos:"
            echo "  status              - Zeige alle Friend Networks"
            echo "  connect <friend>    - Verbinde zu Friend Network"
            echo "  broadcast <msg>     - Broadcast an alle Friends"
            echo "  list               - Liste alle Friends"
            echo ""
            echo "Beispiele:"
            echo "  $0 status"
            echo "  $0 connect max"
            echo "  $0 broadcast 'Hello Friends!'"
            ;;
    esac
}

main "$@"
EOF

    chmod +x ./friend_network_connector.sh
    log_success "Friend Network Connector erstellt"
}

# Shared Services Setup
create_shared_services() {
    log_info "üìù Erstelle Shared Services Setup..."
    
    cat > ./gentleman_shared_services.md << 'EOF'
# GENTLEMAN Shared Services

## üéØ Konzept
Optionale gemeinsame Services die alle Friends nutzen k√∂nnen, aber jeder hostet sein eigenes GENTLEMAN System.

## üåê M√∂gliche Shared Services

### 1. Gemeinsamer Chat/Status Server
- **Host**: Einer der Friends (rotierend)
- **Zweck**: Status-Updates, Chat zwischen GENTLEMAN Systemen
- **Kosten**: ‚Ç¨0 (einer hostet f√ºr alle)

### 2. Backup/Sync Service
- **Host**: Distributed zwischen Friends
- **Zweck**: Gegenseitige Config-Backups
- **Kosten**: ‚Ç¨0 (jeder sichert einen anderen)

### 3. Monitoring Dashboard
- **Host**: Einer der Friends
- **Zweck**: √úbersicht √ºber alle GENTLEMAN Systeme
- **Kosten**: ‚Ç¨0 (freiwillig gehostet)

## üîß Implementation

### Chat Server (Optional)
```bash
# Einer der Friends hostet:
python3 gentleman_chat_server.py --port 9000

# Alle anderen verbinden sich:
./friend_network_connector.sh connect chat-host
```

### Backup Ring (Distributed)
```bash
# Jeder Friend sichert einen anderen:
# Amon ‚Üí Max
# Max ‚Üí Lisa  
# Lisa ‚Üí Tom
# Tom ‚Üí Amon
```

## üí∞ Kosten
- **Pro Friend**: ‚Ç¨0 zus√§tzlich
- **Shared Services**: Freiwillig gehostet
- **Backup**: Gegenseitig kostenlos

## üõ°Ô∏è Vorteile
- Jeder beh√§lt Kontrolle √ºber sein System
- Keine zentrale Abh√§ngigkeit
- Ausfallsicher durch Dezentralisierung
- Kostenlos durch Community-Hosting
EOF

    log_success "Shared Services Guide erstellt"
}

# Skalierungs-Analyse
show_scaling_analysis() {
    echo -e "${PURPLE}üìä Tailscale Skalierungs-Analyse${NC}"
    echo "=================================="
    echo ""
    echo -e "${GREEN}‚úÖ Perfekte Skalierung bei dezentralem Setup:${NC}"
    echo ""
    echo "üë• Anzahl Friends ‚îÇ Ger√§te/Friend ‚îÇ Tailscale Kosten ‚îÇ Pro Person"
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    echo "        5        ‚îÇ       4       ‚îÇ        ‚Ç¨0        ‚îÇ    ‚Ç¨0"
    echo "       10        ‚îÇ       4       ‚îÇ        ‚Ç¨0        ‚îÇ    ‚Ç¨0"
    echo "       50        ‚îÇ       4       ‚îÇ        ‚Ç¨0        ‚îÇ    ‚Ç¨0"
    echo "      100        ‚îÇ       4       ‚îÇ        ‚Ç¨0        ‚îÇ    ‚Ç¨0"
    echo ""
    echo -e "${BLUE}üí° Warum das funktioniert:${NC}"
    echo "‚Ä¢ Jeder Friend = eigenes Tailscale-Konto"
    echo "‚Ä¢ Jeder bleibt unter 20 Ger√§te-Limit"
    echo "‚Ä¢ Inter-Network Communication √ºber √∂ffentliche IPs"
    echo "‚Ä¢ Keine geteilten Kosten"
    echo ""
    echo -e "${CYAN}üîÑ Friend-to-Friend Kommunikation:${NC}"
    echo "‚Ä¢ Tailscale gibt jedem Netzwerk √∂ffentliche IPs"
    echo "‚Ä¢ Friends k√∂nnen sich gegenseitig erreichen"
    echo "‚Ä¢ Optional: Shared Services f√ºr Community-Features"
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è Einziges Risiko:${NC}"
    echo "‚Ä¢ Tailscale k√∂nnte kostenlose Tier komplett abschaffen"
    echo "‚Ä¢ Aber: Sehr unwahrscheinlich (20 Ger√§te sind gro√üz√ºgig)"
    echo "‚Ä¢ Backup: WireGuard-Setup als Notfall-Plan"
}

# Deployment Guide f√ºr Friends
create_friend_deployment() {
    log_info "üìñ Erstelle Friend Deployment Guide..."
    
    cat > ./GENTLEMAN_Friend_Deployment.md << 'EOF'
# GENTLEMAN Friend Deployment Guide

## üéØ F√ºr neue Friends: Dein eigenes GENTLEMAN System

### 1. Tailscale Setup
```bash
# macOS
brew install tailscale
sudo tailscale up

# Linux
curl -fsSL https://tailscale.com/install.sh | sh
sudo tailscale up
```

### 2. GENTLEMAN System Setup
```bash
# Clone das GENTLEMAN Repository
git clone https://github.com/your-repo/gentleman.git
cd gentleman

# Setup f√ºr dein System
./handshake_m1.sh        # Oder entsprechendes Script f√ºr dein OS
```

### 3. Friend Network Registration
```bash
# Teile deine Tailscale IP mit anderen Friends
tailscale ip -4

# Beispiel: 100.64.0.25
# Andere Friends f√ºgen dich hinzu in friend_network_connector.sh
```

### 4. Teste Friend Connections
```bash
# Status aller Friend Networks
./friend_network_connector.sh status

# Verbinde zu einem Friend
./friend_network_connector.sh connect amon
```

## üë• Friend Network Management

### Neuen Friend hinzuf√ºgen
```bash
# In friend_network_connector.sh:
FRIEND_NETWORKS+=(
    "new_friend:100.64.0.99:8765"
)
```

### Friend Network Status
```bash
./friend_network_connector.sh status
```

## üí∞ Kosten pro Friend
- **Tailscale**: ‚Ç¨0 (bis 20 Ger√§te)
- **GENTLEMAN Setup**: ‚Ç¨0 (Open Source)
- **Shared Services**: ‚Ç¨0 (Community gehostet)
- **Total**: ‚Ç¨0

## üîß Optional: Shared Services
- Chat zwischen GENTLEMAN Systemen
- Gegenseitige Backups
- Community Monitoring
- Alle freiwillig und kostenlos
EOF

    log_success "Friend Deployment Guide erstellt"
}

# Hauptfunktion
main() {
    echo -e "${PURPLE}üéØ GENTLEMAN Tailscale Friend Network Setup${NC}"
    echo "=============================================="
    echo ""
    
    log_info "Dezentrale Architektur erkannt - perfekt f√ºr Tailscale!"
    echo ""
    
    show_decentralized_architecture
    show_scaling_analysis
    
    create_friend_communication
    create_shared_services
    create_friend_deployment
    
    echo ""
    log_success "üéâ Friend Network Setup erstellt!"
    echo ""
    echo -e "${CYAN}üìÅ Erstellt:${NC}"
    echo "‚Ä¢ friend_network_connector.sh - Friend-to-Friend Kommunikation"
    echo "‚Ä¢ gentleman_shared_services.md - Optionale Shared Services"
    echo "‚Ä¢ GENTLEMAN_Friend_Deployment.md - Guide f√ºr neue Friends"
    echo ""
    echo -e "${GREEN}‚úÖ Perfekte Skalierung:${NC}"
    echo "‚Ä¢ Jeder Friend = eigenes Tailscale-Konto (kostenlos)"
    echo "‚Ä¢ Unbegrenzte Anzahl Friends m√∂glich"
    echo "‚Ä¢ Keine geteilten Kosten"
    echo "‚Ä¢ Inter-Network Kommunikation funktioniert"
    echo ""
    echo -e "${YELLOW}üöÄ N√§chste Schritte:${NC}"
    echo "1. Teile GENTLEMAN Setup mit Friends"
    echo "2. Jeder erstellt sein eigenes Tailscale-Konto"
    echo "3. IPs austauschen f√ºr Friend Network"
    echo "4. Optional: Shared Services einrichten"
}

main "$@" 

# GENTLEMAN Tailscale Friend Network Setup
# Dezentrale Netzwerke mit Inter-Friend Kommunikation

set -eo pipefail

# Farben
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

log_success() {
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] ${GREEN}‚úÖ $1${NC}"
}

log_error() {
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] ${RED}‚ùå $1${NC}" >&2
}

log_info() {
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] ${BLUE}‚ÑπÔ∏è $1${NC}"
}

log_warning() {
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] ${YELLOW}‚ö†Ô∏è $1${NC}"
}

# Zeige dezentrale Architektur
show_decentralized_architecture() {
    echo -e "${PURPLE}üåê GENTLEMAN Dezentrale Tailscale Architektur${NC}"
    echo "=============================================="
    echo ""
    echo -e "${CYAN}Jeder Freund hat sein eigenes Tailscale-Netzwerk:${NC}"
    echo ""
    echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
    echo "‚îÇ   Amon's Net    ‚îÇ  ‚îÇ   Max's Net     ‚îÇ  ‚îÇ   Lisa's Net    ‚îÇ"
    echo "‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ  ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ  ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ"
    echo "‚îÇ ‚îÇ M1  ‚îÇ ‚îÇ RX  ‚îÇ ‚îÇ  ‚îÇ ‚îÇLptop‚îÇ ‚îÇ Pi  ‚îÇ ‚îÇ  ‚îÇ ‚îÇ PC  ‚îÇ ‚îÇPhone‚îÇ ‚îÇ"
    echo "‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ  ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ  ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ"
    echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
    echo "        ‚îÇ                     ‚îÇ                     ‚îÇ"
    echo "        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
    echo "                              ‚îÇ"
    echo "                    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
    echo "                    ‚îÇ Shared Services ‚îÇ"
    echo "                    ‚îÇ (Optional)      ‚îÇ"
    echo "                    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
    echo ""
}

# Friend-to-Friend Kommunikation
create_friend_communication() {
    log_info "üìù Erstelle Friend-to-Friend Kommunikations-Setup..."
    
    cat > ./friend_network_connector.sh << 'EOF'
#!/bin/bash

# GENTLEMAN Friend Network Connector
# Verbindet verschiedene Tailscale-Netzwerke von Freunden

# Konfiguration
FRIEND_NETWORKS=(
    "amon:100.96.219.28:8765"      # Amon's M1 Mac
    "max:100.64.0.15:8765"         # Max's Laptop (Beispiel IP)
    "lisa:100.64.0.32:8765"        # Lisa's PC (Beispiel IP)
    "tom:100.64.0.48:8765"         # Tom's Mac (Beispiel IP)
)

# Farben
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}‚ÑπÔ∏è $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

# Pr√ºfe alle Friend Networks
check_friend_networks() {
    echo "üåê GENTLEMAN Friend Networks Status"
    echo "===================================="
    echo ""
    
    for network in "${FRIEND_NETWORKS[@]}"; do
        IFS=':' read -r friend_name friend_ip friend_port <<< "$network"
        
        echo -n "üë§ $friend_name ($friend_ip): "
        
        if curl -s --max-time 3 "http://$friend_ip:$friend_port/health" >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Online${NC}"
        else
            echo -e "${RED}‚ùå Offline${NC}"
        fi
    done
    echo ""
}

# Verbinde zu Friend Network
connect_to_friend() {
    local friend_name="$1"
    
    if [ -z "$friend_name" ]; then
        echo "Verwendung: $0 connect <friend-name>"
        echo ""
        echo "Verf√ºgbare Freunde:"
        for network in "${FRIEND_NETWORKS[@]}"; do
            IFS=':' read -r name ip port <<< "$network"
            echo "  ‚Ä¢ $name"
        done
        return 1
    fi
    
    # Finde Friend Network
    for network in "${FRIEND_NETWORKS[@]}"; do
        IFS=':' read -r name ip port <<< "$network"
        if [ "$name" = "$friend_name" ]; then
            log_info "üîó Verbinde zu $friend_name's GENTLEMAN System..."
            
            # Teste Verbindung
            if curl -s --max-time 5 "http://$ip:$port/health" >/dev/null 2>&1; then
                log_success "Verbunden mit $friend_name ($ip:$port)"
                
                # Zeige verf√ºgbare Services
                echo ""
                echo "üéØ Verf√ºgbare Services bei $friend_name:"
                echo "‚Ä¢ Status: curl http://$ip:$port/status"
                echo "‚Ä¢ Nodes: curl http://$ip:$port/nodes"
                echo "‚Ä¢ SSH: ssh $ip (falls konfiguriert)"
                
                return 0
            else
                log_error "$friend_name ist nicht erreichbar"
                return 1
            fi
        fi
    done
    
    log_error "Freund '$friend_name' nicht gefunden"
}

# Broadcast an alle Friends
broadcast_to_friends() {
    local message="$1"
    
    if [ -z "$message" ]; then
        echo "Verwendung: $0 broadcast '<message>'"
        return 1
    fi
    
    log_info "üì° Sende Broadcast an alle Friend Networks..."
    
    for network in "${FRIEND_NETWORKS[@]}"; do
        IFS=':' read -r friend_name friend_ip friend_port <<< "$network"
        
        echo -n "üì§ $friend_name: "
        
        # Sende Message (hier k√∂nntest du einen Custom Endpoint verwenden)
        if curl -s --max-time 3 "http://$friend_ip:$friend_port/health" >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Delivered${NC}"
        else
            echo -e "${RED}‚ùå Failed${NC}"
        fi
    done
}

# Hauptfunktion
main() {
    case "${1:-status}" in
        "status")
            check_friend_networks
            ;;
        "connect")
            connect_to_friend "$2"
            ;;
        "broadcast")
            broadcast_to_friends "$2"
            ;;
        "list")
            echo "üë• GENTLEMAN Friend Networks:"
            for network in "${FRIEND_NETWORKS[@]}"; do
                IFS=':' read -r name ip port <<< "$network"
                echo "  ‚Ä¢ $name: $ip:$port"
            done
            ;;
        *)
            echo "üéØ GENTLEMAN Friend Network Connector"
            echo "====================================="
            echo ""
            echo "Kommandos:"
            echo "  status              - Zeige alle Friend Networks"
            echo "  connect <friend>    - Verbinde zu Friend Network"
            echo "  broadcast <msg>     - Broadcast an alle Friends"
            echo "  list               - Liste alle Friends"
            echo ""
            echo "Beispiele:"
            echo "  $0 status"
            echo "  $0 connect max"
            echo "  $0 broadcast 'Hello Friends!'"
            ;;
    esac
}

main "$@"
EOF

    chmod +x ./friend_network_connector.sh
    log_success "Friend Network Connector erstellt"
}

# Shared Services Setup
create_shared_services() {
    log_info "üìù Erstelle Shared Services Setup..."
    
    cat > ./gentleman_shared_services.md << 'EOF'
# GENTLEMAN Shared Services

## üéØ Konzept
Optionale gemeinsame Services die alle Friends nutzen k√∂nnen, aber jeder hostet sein eigenes GENTLEMAN System.

## üåê M√∂gliche Shared Services

### 1. Gemeinsamer Chat/Status Server
- **Host**: Einer der Friends (rotierend)
- **Zweck**: Status-Updates, Chat zwischen GENTLEMAN Systemen
- **Kosten**: ‚Ç¨0 (einer hostet f√ºr alle)

### 2. Backup/Sync Service
- **Host**: Distributed zwischen Friends
- **Zweck**: Gegenseitige Config-Backups
- **Kosten**: ‚Ç¨0 (jeder sichert einen anderen)

### 3. Monitoring Dashboard
- **Host**: Einer der Friends
- **Zweck**: √úbersicht √ºber alle GENTLEMAN Systeme
- **Kosten**: ‚Ç¨0 (freiwillig gehostet)

## üîß Implementation

### Chat Server (Optional)
```bash
# Einer der Friends hostet:
python3 gentleman_chat_server.py --port 9000

# Alle anderen verbinden sich:
./friend_network_connector.sh connect chat-host
```

### Backup Ring (Distributed)
```bash
# Jeder Friend sichert einen anderen:
# Amon ‚Üí Max
# Max ‚Üí Lisa  
# Lisa ‚Üí Tom
# Tom ‚Üí Amon
```

## üí∞ Kosten
- **Pro Friend**: ‚Ç¨0 zus√§tzlich
- **Shared Services**: Freiwillig gehostet
- **Backup**: Gegenseitig kostenlos

## üõ°Ô∏è Vorteile
- Jeder beh√§lt Kontrolle √ºber sein System
- Keine zentrale Abh√§ngigkeit
- Ausfallsicher durch Dezentralisierung
- Kostenlos durch Community-Hosting
EOF

    log_success "Shared Services Guide erstellt"
}

# Skalierungs-Analyse
show_scaling_analysis() {
    echo -e "${PURPLE}üìä Tailscale Skalierungs-Analyse${NC}"
    echo "=================================="
    echo ""
    echo -e "${GREEN}‚úÖ Perfekte Skalierung bei dezentralem Setup:${NC}"
    echo ""
    echo "üë• Anzahl Friends ‚îÇ Ger√§te/Friend ‚îÇ Tailscale Kosten ‚îÇ Pro Person"
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    echo "        5        ‚îÇ       4       ‚îÇ        ‚Ç¨0        ‚îÇ    ‚Ç¨0"
    echo "       10        ‚îÇ       4       ‚îÇ        ‚Ç¨0        ‚îÇ    ‚Ç¨0"
    echo "       50        ‚îÇ       4       ‚îÇ        ‚Ç¨0        ‚îÇ    ‚Ç¨0"
    echo "      100        ‚îÇ       4       ‚îÇ        ‚Ç¨0        ‚îÇ    ‚Ç¨0"
    echo ""
    echo -e "${BLUE}üí° Warum das funktioniert:${NC}"
    echo "‚Ä¢ Jeder Friend = eigenes Tailscale-Konto"
    echo "‚Ä¢ Jeder bleibt unter 20 Ger√§te-Limit"
    echo "‚Ä¢ Inter-Network Communication √ºber √∂ffentliche IPs"
    echo "‚Ä¢ Keine geteilten Kosten"
    echo ""
    echo -e "${CYAN}üîÑ Friend-to-Friend Kommunikation:${NC}"
    echo "‚Ä¢ Tailscale gibt jedem Netzwerk √∂ffentliche IPs"
    echo "‚Ä¢ Friends k√∂nnen sich gegenseitig erreichen"
    echo "‚Ä¢ Optional: Shared Services f√ºr Community-Features"
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è Einziges Risiko:${NC}"
    echo "‚Ä¢ Tailscale k√∂nnte kostenlose Tier komplett abschaffen"
    echo "‚Ä¢ Aber: Sehr unwahrscheinlich (20 Ger√§te sind gro√üz√ºgig)"
    echo "‚Ä¢ Backup: WireGuard-Setup als Notfall-Plan"
}

# Deployment Guide f√ºr Friends
create_friend_deployment() {
    log_info "üìñ Erstelle Friend Deployment Guide..."
    
    cat > ./GENTLEMAN_Friend_Deployment.md << 'EOF'
# GENTLEMAN Friend Deployment Guide

## üéØ F√ºr neue Friends: Dein eigenes GENTLEMAN System

### 1. Tailscale Setup
```bash
# macOS
brew install tailscale
sudo tailscale up

# Linux
curl -fsSL https://tailscale.com/install.sh | sh
sudo tailscale up
```

### 2. GENTLEMAN System Setup
```bash
# Clone das GENTLEMAN Repository
git clone https://github.com/your-repo/gentleman.git
cd gentleman

# Setup f√ºr dein System
./handshake_m1.sh        # Oder entsprechendes Script f√ºr dein OS
```

### 3. Friend Network Registration
```bash
# Teile deine Tailscale IP mit anderen Friends
tailscale ip -4

# Beispiel: 100.64.0.25
# Andere Friends f√ºgen dich hinzu in friend_network_connector.sh
```

### 4. Teste Friend Connections
```bash
# Status aller Friend Networks
./friend_network_connector.sh status

# Verbinde zu einem Friend
./friend_network_connector.sh connect amon
```

## üë• Friend Network Management

### Neuen Friend hinzuf√ºgen
```bash
# In friend_network_connector.sh:
FRIEND_NETWORKS+=(
    "new_friend:100.64.0.99:8765"
)
```

### Friend Network Status
```bash
./friend_network_connector.sh status
```

## üí∞ Kosten pro Friend
- **Tailscale**: ‚Ç¨0 (bis 20 Ger√§te)
- **GENTLEMAN Setup**: ‚Ç¨0 (Open Source)
- **Shared Services**: ‚Ç¨0 (Community gehostet)
- **Total**: ‚Ç¨0

## üîß Optional: Shared Services
- Chat zwischen GENTLEMAN Systemen
- Gegenseitige Backups
- Community Monitoring
- Alle freiwillig und kostenlos
EOF

    log_success "Friend Deployment Guide erstellt"
}

# Hauptfunktion
main() {
    echo -e "${PURPLE}üéØ GENTLEMAN Tailscale Friend Network Setup${NC}"
    echo "=============================================="
    echo ""
    
    log_info "Dezentrale Architektur erkannt - perfekt f√ºr Tailscale!"
    echo ""
    
    show_decentralized_architecture
    show_scaling_analysis
    
    create_friend_communication
    create_shared_services
    create_friend_deployment
    
    echo ""
    log_success "üéâ Friend Network Setup erstellt!"
    echo ""
    echo -e "${CYAN}üìÅ Erstellt:${NC}"
    echo "‚Ä¢ friend_network_connector.sh - Friend-to-Friend Kommunikation"
    echo "‚Ä¢ gentleman_shared_services.md - Optionale Shared Services"
    echo "‚Ä¢ GENTLEMAN_Friend_Deployment.md - Guide f√ºr neue Friends"
    echo ""
    echo -e "${GREEN}‚úÖ Perfekte Skalierung:${NC}"
    echo "‚Ä¢ Jeder Friend = eigenes Tailscale-Konto (kostenlos)"
    echo "‚Ä¢ Unbegrenzte Anzahl Friends m√∂glich"
    echo "‚Ä¢ Keine geteilten Kosten"
    echo "‚Ä¢ Inter-Network Kommunikation funktioniert"
    echo ""
    echo -e "${YELLOW}üöÄ N√§chste Schritte:${NC}"
    echo "1. Teile GENTLEMAN Setup mit Friends"
    echo "2. Jeder erstellt sein eigenes Tailscale-Konto"
    echo "3. IPs austauschen f√ºr Friend Network"
    echo "4. Optional: Shared Services einrichten"
}

main "$@" 
 